// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct MoveMessage {
    // message fields
    pub gameID: ::std::string::String,
    pub field_move: MoveMessage_Move,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MoveMessage {
    pub fn new() -> MoveMessage {
        ::std::default::Default::default()
    }

    // string gameID = 1;

    pub fn clear_gameID(&mut self) {
        self.gameID.clear();
    }

    // Param is passed by value, moved
    pub fn set_gameID(&mut self, v: ::std::string::String) {
        self.gameID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gameID(&mut self) -> &mut ::std::string::String {
        &mut self.gameID
    }

    // Take field
    pub fn take_gameID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gameID, ::std::string::String::new())
    }

    pub fn get_gameID(&self) -> &str {
        &self.gameID
    }

    // .protobuf.MoveMessage.Move move = 2;

    pub fn clear_field_move(&mut self) {
        self.field_move = MoveMessage_Move::NULL;
    }

    // Param is passed by value, moved
    pub fn set_field_move(&mut self, v: MoveMessage_Move) {
        self.field_move = v;
    }

    pub fn get_field_move(&self) -> MoveMessage_Move {
        self.field_move
    }
}

impl ::protobuf::Message for MoveMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gameID)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_move, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gameID.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gameID);
        }
        if self.field_move != MoveMessage_Move::NULL {
            my_size += ::protobuf::rt::enum_size(2, self.field_move);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.gameID.is_empty() {
            os.write_string(1, &self.gameID)?;
        }
        if self.field_move != MoveMessage_Move::NULL {
            os.write_enum(2, self.field_move.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MoveMessage {
        MoveMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gameID",
                    |m: &MoveMessage| { &m.gameID },
                    |m: &mut MoveMessage| { &mut m.gameID },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MoveMessage_Move>>(
                    "move",
                    |m: &MoveMessage| { &m.field_move },
                    |m: &mut MoveMessage| { &mut m.field_move },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MoveMessage>(
                    "MoveMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MoveMessage {
        static mut instance: ::protobuf::lazy::Lazy<MoveMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MoveMessage,
        };
        unsafe {
            instance.get(MoveMessage::new)
        }
    }
}

impl ::protobuf::Clear for MoveMessage {
    fn clear(&mut self) {
        self.clear_gameID();
        self.clear_field_move();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MoveMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MoveMessage_Move {
    NULL = 0,
    START = 1,
    COOPERATE = 2,
    DEFECT = 3,
    QUIT = 4,
}

impl ::protobuf::ProtobufEnum for MoveMessage_Move {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MoveMessage_Move> {
        match value {
            0 => ::std::option::Option::Some(MoveMessage_Move::NULL),
            1 => ::std::option::Option::Some(MoveMessage_Move::START),
            2 => ::std::option::Option::Some(MoveMessage_Move::COOPERATE),
            3 => ::std::option::Option::Some(MoveMessage_Move::DEFECT),
            4 => ::std::option::Option::Some(MoveMessage_Move::QUIT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MoveMessage_Move] = &[
            MoveMessage_Move::NULL,
            MoveMessage_Move::START,
            MoveMessage_Move::COOPERATE,
            MoveMessage_Move::DEFECT,
            MoveMessage_Move::QUIT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MoveMessage_Move", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MoveMessage_Move {
}

impl ::std::default::Default for MoveMessage_Move {
    fn default() -> Self {
        MoveMessage_Move::NULL
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveMessage_Move {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tipd.proto\x12\x08protobuf\"\x97\x01\n\x0bMoveMessage\x12\x16\n\x06ga\
    meID\x18\x01\x20\x01(\tR\x06gameID\x12.\n\x04move\x18\x02\x20\x01(\x0e2\
    \x1a.protobuf.MoveMessage.MoveR\x04move\"@\n\x04Move\x12\x08\n\x04NULL\
    \x10\0\x12\t\n\x05START\x10\x01\x12\r\n\tCOOPERATE\x10\x02\x12\n\n\x06DE\
    FECT\x10\x03\x12\x08\n\x04QUIT\x10\x042A\n\x03IPD\x12:\n\x04Game\x12\x15\
    .protobuf.MoveMessage\x1a\x15.protobuf.MoveMessage\"\0(\x010\x01b\x06pro\
    to3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
