syntax = "proto3";

package ipd;

// Iterated Prisoners Dilemma.
service IPD {

    /// NewGame requests a new game
    rpc NewGame(NewGameRequest) returns (NewGameResponse) {}

	/// Play makes a single move in an existing game
	rpc Play(ActionRequest) returns (ActionResult) {}

	/// PlayGame streams a single game in both directions
	rpc PlayGame(stream ActionRequest) returns (stream ActionResult) {}

}

enum Action {
    NULL = 0;
    COOPERATE = 1;
    DEFECT = 2;
}

message NewGameRequest {
    string playerName = 1;
}

message NewGameResponse {
    uint32 gameID = 1;
    string opponentName = 2;
}

message ActionRequest {
    uint32 gameID = 1;
    Action action = 2;
}

message ActionResult {
	uint32 gameID = 1;
    Action action = 2;
    uint32 payoff = 3;
}
